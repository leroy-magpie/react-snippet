{
  "引入": {
    "prefix": "im",
    "body": ["import ${1:React} from '${2:react}';"]
  },
  "注释": {
    "prefix": "zs",
    "body": ["/** $1 */"]
  },
  "默认 props": {
    "prefix": "dp",
    "body": ["static defaultProps = {", "  ${1:name}:", "}", ""]
  },
  "默认 state": {
    "prefix": "ds",
    "body": ["readonly state = {", "  ${1:name}:", "}", ""]
  },
  "解构 props": {
    "prefix": "gp",
    "body": ["const { $1 } = props;"]
  },
  "解构 this.props": {
    "prefix": "gtp",
    "body": ["const { $1 } = this.props;"]
  },
  "解构 useState": {
    "prefix": "gs",
    "body": ["const [${1:data}, set${1:data}] = useState();"]
  },
  "解构 this.state": {
    "prefix": "gts",
    "body": ["const { $1 } = this.state;"]
  },
  "解构对象": {
    "prefix": "go",
    "body": ["const { $2 } = $1;"]
  },
  "setState": {
    "prefix": "cs",
    "body": ["this.setState({ ${1:name} });"]
  },
  "方法": {
    "prefix": "h",
    "body": ["const handle${1} = ($2) => {", "  ${3}", "};", ""]
  },
  "私有方法": {
    "prefix": "ph",
    "body": ["private ${1:handle} = ($2) => {", "  ${3}", "}", ""]
  },
  "数据层": {
    "prefix": "tr",
    "body": [
      "try {",
      "  await ${1:handle}()",
      "} catch (e) {",
      "  console.error(e);",
      "}"
    ]
  },
  "className": {
    "prefix": "cl",
    "body": ["className=\"$1\""]
  },
  "函数组件": {
    "prefix": "rf",
    "body": [
      "import React, { memo } from 'react';",
      "",
      "import './${1:temp}.less';",
      "",
      "export interface IProps {",
      "  emp?: string;",
      "}",
      "",
      "const ${1:temp}: React.FC<IProps> = memo(() => {",
      "  return (",
      "    <div>a</div>",
      "  );",
      "})",
      "",
      "${1:temp}.displayName = '${1:temp}'",
      "",
      "export default ${1:temp};",
      ""
    ]
  },
  "react 普通模版": {
    "prefix": "rc",
    "body": [
      "import React, { PureComponent } from 'react';",
      "",
      "import './${1:temp}.less';",
      "",
      "export interface IPropsExternal {",
      "  emp?: string;",
      "}",
      "",
      "type IProps = IPropsExternal;",
      "",
      "class ${1:temp} extends PureComponent<IProps> {",
      "  render() {",
      "    return (",
      "      <div>a</div>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:temp};",
      ""
    ]
  },
  "react connect 模版": {
    "prefix": "rcc",
    "body": [
      "import React, { PureComponent } from 'react';",
      "import { connect } from 'react-redux';",
      "",
      "import './${1:temp}.less';",
      "",
      "export interface IPropsExternal {",
      "  emp?: string;",
      "}",
      "",
      "interface IPropsConnected {",
      "  emp?: string;",
      "}",
      "",
      "type IProps = IPropsExternal & IPropsConnected;",
      "",
      "const mapStateToProps = state => ({",
      "",
      "});",
      "",
      "const mapDispatchToProps = {",
      "",
      "};",
      "",
      "@connect(mapStateToProps, mapDispatchToProps)",
      "class ${1:temp} extends PureComponent<IProps> {",
      "  render() {",
      "    return (",
      "      <div>${2:a}</div>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:temp} as React.ComponentClass<IPropsExternal>;",
      ""
    ]
  },
  "list 模版": {
    "prefix": "list",
    "body": [
      "import React, { memo } from \"react\";",
      "import { Table } from \"antd\";",
      "",
      "export interface IProps {",
      "  className?: string;",
      "  isLoading: boolean;",
      "  data: any[];",
      "}",
      "",
      "const scroll = { x: 1000, y: 510 };",
      "const pagination = {",
      "  hideOnSinglePage: true,",
      "  showSizeChanger: false,",
      "  showQuickJumper: true,",
      "};",
      "",
      "const columns = [",
      "  {",
      "    dataIndex: \"id\",",
      "    title: \"ID\",",
      "    width: 50,",
      "  },",
      "];",
      "",
      "const DemoTable: React.FC<IProps> = memo((props) => {",
      "  const { className, isLoading, data } = props;",
      "",
      "  return (",
      "    <Table",
      "      className={className}",
      "      rowKey=\"id\"",
      "      scroll={scroll}",
      "      columns={columns}",
      "      pagination={pagination}",
      "      loading={isLoading}",
      "      dataSource={data}",
      "    />",
      "  );",
      "});",
      "",
      "DemoTable.displayName = \"DemoTable\";",
      "",
      "export default DemoTable;",
      ""
    ],
    "description": ""
  }
}
